{
    "contents" : "#' Generate final promoter regions data\n#' \ngenPromRegionsData <- function(promData, methData, overlaps, numCpG=10, sdThresh=0,\n                                upstream=-100, downstream=100, fmin=-1, fmax=1){\n  \n  message(\"Converting Granges objects in matrices...\")\n  hits      <- as.matrix(overlaps)  # Create a HITS matrix for faster computations\n  promLocs  <- unique(hits[,1])     # Keep promoter locations\n  numProms  <- length(promLocs)     # Keep total number promoters\n  \n  # Convert data in matrix format for faster lookup\n  methLoc   <- as.matrix(ranges(methData)@start)\n  tssLoc    <- as.matrix(elementMetadata(promData)$tss)\n  totReads  <- as.matrix(elementMetadata(methData)$totalReads)\n  methReads <- as.matrix(elementMetadata(methData)$methReads)\n  \n  X         <- list()                 # List where data will be stored\n  n         <- 1                      # Data points counter\n  promCount <- 0                      # Promoter counter\n  LABEL     <- FALSE                  # Flag variable\n  promInd   <- vector(mode=\"integer\") # Vector of promoter indices\n  methInd   <- vector(mode=\"integer\") # Vector of methylation indices\n  methInd   <- c(methInd, hits[1,2])  # Add the first subject hit\n  \n  \n  message(\"Generating promoter regions data...\")\n  for (i in 2:NROW(hits)){\n    # If query hits is the same as the previous\n    if (hits[i,1] == hits[(i-1),1]){\n      methInd     <- c(methInd, hits[i,2])  # Add subject hit in the vector\n    }else{\n      promCount   <- promCount + 1    # Increase promoter counter\n      LABEL       <- TRUE\n    }\n    \n    if(LABEL){\n      # Only keep regions that have more than 'n' CpGs\n      if (length(methInd) > numCpG){\n        # If the standard deviation of the methylation level is above threshold\n        if (sd(methReads[methInd]/totReads[methInd]) > sdThresh){\n          promInd     <- c(promInd, promLocs[promCount])\n          \n          # Locations of CpGs in the genome\n          region      <- methLoc[methInd]\n          \n          # TSS location for promoter 'promCount'\n          tss         <- tssLoc[promLocs[promCount]]\n          \n          # Shift location around TSS\n          meanNorm    <- region - tss\n          \n          # Extract strand information\n          str.dir     <- as.matrix(strand(promData[promLocs[promCount]])@values)[1,1]\n          if (identical(str.dir,\"-\")){\n            # If '-' strand swap CpG locations\n            meanNorm  <- (-meanNorm)\n          }\n          # In the \"-\" strand the order of the locations should change\n          Order       <- order(meanNorm)\n          \n          X[[n]]      <- matrix(0, nrow=3, ncol=length(methInd))\n          \n          # Store normalized locations of methylated CpGs in (-1,1) region\n          X.std       <- (meanNorm[Order] - upstream) / (downstream - upstream)\n          X[[n]][1,]  <- X.std * (fmax - fmin) + fmin\n          \n          # Store total reads in the corresponding locations\n          X[[n]][2,]  <-  totReads[methInd][Order]\n          \n          # Store methylated reads in the corresponding locations\n          X[[n]][3,]  <- methReads[methInd][Order]\n          \n          # Increase data points counter\n          n <- n + 1\n        }\n      }\n      LABEL         <- FALSE\n      methInd       <- vector(mode=\"numeric\")\n      methInd       <- c(methInd, hits[i,2])        # Add subject hit in the vector\n    }\n  }\n\n  return(list(X=X, promInd=promInd))\n}\n",
    "created" : 1448033164157.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1573441961",
    "id" : "E6B087A2",
    "lastKnownWriteTime" : 1447943187,
    "path" : "~/Documents/Code/ProcessHTSOLD/genPromRegionsData.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "type" : "r_source"
}