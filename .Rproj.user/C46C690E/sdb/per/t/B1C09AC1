{
    "contents" : "#' Generate methylation data\n\nmeth_data <- function(rrbs_data, promoter_data, upstream, downstream, num_CpG=0, sd_thresh=0, fmin=-1, fmax=1){\n  assert_that(is(rrbs_data, \"GRanges\"))\n  assert_that(is(promoter_data, \"GRanges\"))\n  if (upstream > 0 ){\n    upstream < -upstream\n  }\n\n  # Find overlaps between promoter regions and RRBS data\n  overlaps <- GenomicRanges::findOverlaps(query   = promoter_data,\n                                          subject = rrbs_data,\n                                          ignore.strand = FALSE)\n  message(\"Converting Granges objects in matrices...\")\n  hits <- as.matrix(overlaps)   # Create a HITS matrix for faster computations\n  prom_loc <- unique(hits[,1])  # Keep promoter locations\n\n  # Convert data in matrix format for faster lookup\n  tss_loc    <- as.vector(elementMetadata(promoter_data)$tss)\n  cpg_loc    <- as.vector(ranges(rrbs_data)@start)\n  tot_reads  <- as.vector(elementMetadata(rrbs_data)$total_reads)\n  meth_reads <- as.vector(elementMetadata(rrbs_data)$meth_reads)\n\n  n            <- 1                         # Data points counter\n  LABEL        <- FALSE                     # Flag variable\n  meth_data    <- list()                    # List where data will be stored\n  prom_counter <- 0                         # Promoter counter\n  prom_ind     <- vector(mode = \"integer\")  # Vector of promoter indices\n  cpg_ind      <- vector(mode = \"integer\")  # Vector of CpG indices\n  cpg_ind      <- c(cpg_ind, hits[1,2])     # Add the first subject hit\n\n  message(\"Generating promoter regions data...\")\n  for (i in 2:NROW(hits)){\n    # If query hits is the same as the previous one\n    if (hits[i,1] == hits[(i - 1),1]){\n      cpg_ind      <- c(cpg_ind, hits[i,2])  # Add subject hit in the vector\n    }else{\n      prom_counter <- prom_counter + 1  # Increase promoter counter\n      LABEL        <- TRUE\n    }\n\n    if(LABEL){\n      # Only keep regions that have more than 'n' CpGs\n      if (length(cpg_ind) > num_CpG){\n        # If the standard deviation of the methylation level is above threshold\n        if (sd(meth_reads[cpg_ind] / tot_reads[cpg_ind]) > sd_thresh){\n          prom_ind      <- c(prom_ind, prom_loc[prom_counter])\n          # Locations of CpGs in the genome\n          region        <- cpg_loc[cpg_ind]\n          # TSS location for promoter 'promCount'\n          tss           <- tss_loc[prom_loc[prom_counter]]\n          # Extract strand information, i.e. direction\n          strand_direct <- as.matrix(strand(promoter_data[prom_loc[prom_counter]])@values)[1,1]\n          # Shift CpG locations relative to TSS\n          centerd_data  <- center_loc(region = region,\n                                      tss = tss,\n                                      strand_direction = strand_direct)\n          # In the \"-\" strand the order of the locations should change\n          Order <- order(centerd_data)\n\n          meth_data[[n]] <- matrix(0, nrow = 3, ncol = length(cpg_ind))\n\n          # Store normalized locations of methylated CpGs in (fmin, fmax) region\n          meth_data[[n]][1, ] <- minmax_scaling(data = centerd_data[Order],\n                                                xmin = upstream,\n                                                xmax = downstream,\n                                                fmin = fmin,\n                                                fmax = fmax)\n\n          # Store total reads in the corresponding locations\n          meth_data[[n]][2, ] <- tot_reads[cpg_ind][Order]\n          # Store methylated reads in the corresponding locations\n          meth_data[[n]][3, ] <- meth_reads[cpg_ind][Order]\n\n          # Increase data points counter\n          n <- n + 1\n        }\n      }\n      LABEL   <- FALSE\n      cpg_ind <- vector(mode=\"integer\")\n      cpg_ind <- c(cpg_ind, hits[i,2])\n    }\n  }\n}\n\n\n# Center CpG locations relative to TSS\ncenter_loc <- function(region, tss, strand_direction){\n  assert_that(is.character(strand_direction))\n\n  center <- region - tss\n  if (identical(strand_direction,\"-\")){\n    center  <- (-center)  # If '-' strand, swap CpG locations\n  }\n\n  return(center)\n}\n",
    "created" : 1448042456208.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3908324633",
    "id" : "B1C09AC1",
    "lastKnownWriteTime" : 1448053765,
    "path" : "~/Documents/Code/processHTS/R/generate_meth_data.R",
    "project_path" : "R/generate_meth_data.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "type" : "r_source"
}